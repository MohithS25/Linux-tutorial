=>COMMAND LINE:-
 -> A command line, or terminal, is a text based interface to the system. 
 -> Ex- ls -l/home
      A command is always the first thing you type. After that we have what are       referred to as command line arguments ( -l /home/ryan ). There must be a        space between the command and the first command line argument also.
 ->Shell,Bash-
   -The shell is a part of the operating system that defines how the terminal       will behave and look after running commands for you.There are various shells    available but the most common one is called bash.
   -If you would like to know which shell you are using you may use a command       called 'echo' to display a system variable stating your current shell. echo     is a command which is used to display messages.                                 Ex: echo $SHELL will display which shell you are using
--------------------------------------------------------------------------------

=>BASIC COMMANDS:-

 ->pwd(Print Working Directory)- To check current working directory

 ->ls(list)- To list the contents of the directory
   ls[options][location]- Whereas pwd is just run by itself with no arguments,               ls is a little more powerful.
  -Ex: Different ways of using ls
     1. ls
     2. bin Documents public_html
     3. ls -l
     4. total 3
     5. drwxr-xr-x  2 ryan users 4096 Mar 23 13:34 bin
     6. drwxr-xr-x 18 ryan users 4096 Feb 17 09:12 Documents
     7. drwxr-xr-x  2 ryan users 4096 May 05 17:25 public_html
     8. ls /etc
     9. a2ps.cfg aliases alsa.d cups fonts my.conf systemd
     10. ...
     11. ls -l /etc
     12. total 3
     13. -rwxr-xr-x  2 root root 123 Mar 23 13:34 a2ps.cfg
     14. -rwxr-xr-x 18 root root 78 Feb 17 09:12 aliases
     15. drwxr-xr-x  2 ryan users 4096 May 05 17:25 alsa.d
    
     Line 1: We ran ls in it's most basic form. It listed the contents of our                current directory.
     Line 4: We ran ls with a single command line option ( -l ) which indicates          we are going to do a long listing. A long listing has the following:
      -First character indicates whether it is a normal file(-) or directory(d)
      -Next 9 characters are permissions for the file or directory
      -The next field is the number of blocks
      -The next field is the owner of the file or directory (ryan in this case).
      -The next field is the group the file or directory belongs to (users in          this case).
      -Following this is the file size.
      -Next up is the file modification time.
      -Finally we have the actual name of the file or directory.
     Line 10: We ran ls with a command line argument( /etc ).When we do this it          tells ls not to list our current directory but instead to list that             directories contents.
     Line 13: We ran ls with both a command line option and argument. As such it         did a long listing of the directory /etc.
     Lines 12 and 15 just indicate that I have cut out some of the commands               normal output for brevities sake. When you run the commands you will            see a longer listing of files and directories.
 
 ->cd (change directory): Used to move to another directory or change current             working directory
--------------------------------------------------------------------------------

=>Paths:
   2 types- absolute and relative
  -Absolute paths specify a location (file or directory) in relation to the root   directory. You can identify them easily as they always begin with a forward     slash ( / ). Forward slash represents root directory.
  -Relative paths specify a location (file or directory) in relation to where we   currently are in the system. They will not begin with a slash
  -Ex:
     1. pwd
     2. /home/ryan
     3. ls Documents
     4. file1.txt file2.txt file3.txt
     5. ...
     6. ls /home/ryan/Documents
     7. file1.txt file2.txt file3.txt
     8. ...
   
    Line 1: We ran pwd just to verify where we currently are.
    Line 3: We ran ls providing it with a relative path.Documents is a directory          in our current location. This command could produce different results           depending on where we are. If we had another user on the system, bob,           and we ran the command when in their home directory then we would list          the contents of their Documents directory instead.
    Line 6: We ran ls providing it with an absolute path.This command will provi          -de the same output regardless of our current location when we run it.
 
 ->Building blocks that can be used to build paths:
   ~ (tilde): This is a shortcut for your home directory.Eg-if your home                 directory is /home/ryan then you could refer to the directory Documents         with the path /home/ryan/Documents or ~/Documents
   . (dot) - This is a reference to your current directory. eg in the example            above we referred to Documents on line 3 with a relative path. It could         also be written as ./Documents 
   .. (dotdot)- This is a reference to the parent directory. You can use this            several times in a path to keep going up the hierarchy.Eg- if you were          in the path /home/ryan you could run the command ls ../../ and this             would do a listing of the root directory.

--------------------------------------------------------------------------------

->Spaces in names: A space on the command line is how we seperate items. They            are how we know what is the program name and can identify each command          line argument.

->Quotes: Anything inside quotes is considered a single item.

->Escape charactera: Escape characters such as backslash( \ ) are used . What            the backslash does is escape (or nullify) the special meaning of the            next character.
         Ex- cd Holiday\ Photos
             Here the special meaning of Photos will be nullified

->Hidden files: If the file or directory's name begins with a .(full stop) then          it is considered to be hidden. Likewise we may rename a hidden file to          remove the . and it will become unhidden. The command ls will not list          hidden files and directories by default. We may modify it by including          the command line option -a so that it does show hidden files and                directories.
--------------------------------------------------------------------------------

=>MANUAL PAGES:- 
  -Manual pages are a set of pages that explain every command available on your    system including what they do,the specifics of how you run them and what        command line arguments they accept.
  -Syntax: 
          man <command to look up>
  -Ex:
    (1) man ls
    (2) NAME
    (3) ls - list directory contents
    (4)
    (5)  SYNOPSIS
    (6)  ls [OPTION]... [FILE]...
    (7)
    (8)  DESCRIPTION
    (9)  List  information  about  the FILEs (the current directory by default)    (10)  Sort entries alphabetically if none of -cftuvSUX nor --sort  is                 specified.
   (11)  Mandatory  arguments  to  long  options are mandatory for short options
         too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..
       ......

  Line 2- Tells us the actual command followed by a simple one line description           of it's function.
  Line 5- is what's called the synopsis. This is really just a quick overview of          how the command should be run.Square brackets( [ ] ) indicate that              something is optional.
  Line 8- presents us with a more detailed description of the command.
  Line 10- onwards Below the description will always be a list of all the                 command line options that are available for the command.


 ->To exit man pages press 'q' to quit
 ->It is possible to do a keyword search on the Manual pages.This can be helpful   if you're not quite sure of what command you may want to use but you know       what you want to achieve.
   -Syntax:
           man -k <search term>
 ->We can use long hand commands or short hand commands to get same output
   Ex:ls -a and ls --all will give same output
      -long hand command line options begin with two dashes ( -- ) and short           hand options begin with a single dash ( - )
--------------------------------------------------------------------------------


